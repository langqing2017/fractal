// Copyright 2018 The go-fractal Authors
// This file is part of the go-fractal library.

// Package config contains the normal config for other modules.
package config

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"math/big"
	"strconv"
	"testing"

	"github.com/langqing2017/fractal/common"
	"github.com/langqing2017/fractal/common/hexutil"
	"github.com/langqing2017/fractal/core/state"
	"github.com/langqing2017/fractal/rlp"
)

func encodePreAlloc(data GenesisAlloc) string {
	p := make([]balanceAllocStruct, len(data))
	var index = 0
	for addr, account := range data {
		addrInt := new(big.Int)
		p[index] = balanceAllocStruct{
			Addr:    addrInt.SetBytes(addr.Bytes()),
			Balance: account.Balance,
			Owner:   account.Owner,
			Code:    account.Code,
			Storage: account.Storage,
		}
		index++
	}

	s, err := rlp.EncodeToBytes(p)

	if err != nil {
		panic(err)
	}
	return string(s)
}

func TestPreAlloc(t *testing.T) {
	addrByte1, _ := hexutil.Decode("0x06acdc0d340a36ef0569ed6072b293c2e98bd839")
	addrByte2, _ := hexutil.Decode("0x6dee8213e1391efed846b7e98281c184a952e1ef")
	addrByte3, _ := hexutil.Decode("0x0000000000000000000000000000000000000001")
	code1 := "0x0061736d0100000001360b60037f7d7d0060027f7f0060037f7f7f017f6000017f60027f7f017f60017d0060027f7e0060000060017f017f60017f0060017e000282010703656e760c656f73696f5f617373657274000103656e76066d656d736574000203656e7610616374696f6e5f646174615f73697a65000303656e7610726561645f616374696f6e5f64617461000403656e76066d656d637079000203656e76077072696e747366000503656e7611656f73696f5f6173736572745f636f64650006030a0907080907090a0008070405017001020205030100010616037f014180c0000b7f0041aec0000b7f0041aec0000b070901056170706c79000c0907010041010b010d0afb05090400100a0b800101037f02400240024002402000450d004100410028028c40200041107622016a220236028c404100410028028440220320006a41076a417871220036028440200241107420004d0d0120014000417f460d020c030b41000f0b4100200241016a36028c40200141016a4000417f470d010b41004190c000100020030f0b20030b02000b3601017f230041106b2200410036020c4100200028020c28020041076a417871220036028440410020003602804041003f0036028c400b02000b4901017f230041106b2201240010070240200042808080808080e4d84a520d002001410036020c20014101360208200120012903083703002001100e1a0b4100100b200141106a24000b0900200120029210050ba90202077f027d230041206b22012102200124002000280204210320002802002104024002400240024010022205450d002005418104490d012005100821000c020b410021000c020b20012005410f6a4170716b220024000b2000200510031a0b200242003703180240200541034b0d00410041a9c00010000b200020056a2101200241186a4104722106200241186a2000410410041a200041046a210702402005417c714104470d00410041a9c00010000b20062007410410041a20022001360210200220003602082002200041086a36020c200241086a20034101756a210120022a021c210820022a0218210902402003410171450d00200128020020046a28020021040b200120092008200411000002402005418104490d00200010090b200241206a240041010bb50101047f230041106b22002101200024000240024002400240024010022202450d002002418004490d012002100821000c020b410021002001410c6a21030c020b20002002410f6a4170716b220024000b2000200210031a2001410c6a2103200241034b0d010b410041a9c00010000b20032000410410041a200041046a210002402002417c714104470d00410041a9c00010000b200141086a2000410410041a20012a020c20012a0208921005200141106a24000b0b2f02004190c0000b1e6661696c656420746f20616c6c6f636174652070616765730072656164000041000b0430200000"
	storage1 := state.Storage{
		state.GetStorageKey(1, []byte{1}): []byte{0xFF},
	}
	var data = GenesisAlloc{
		common.BytesToAddress(addrByte1): {Balance: big.NewInt(5 * 1e14)},
		common.BytesToAddress(addrByte2): {Balance: big.NewInt(0)},
		common.BytesToAddress(addrByte3): {
			Balance: big.NewInt(0),
			Code:    code1,
			Storage: storage1,
		},
	}

	s := encodePreAlloc(data)
	fmt.Println(strconv.QuoteToASCII(s))

	fmt.Println(data)
	fmt.Println(decodePreAlloc(s))
}

func TestMarshalGenesisAlloc(t *testing.T) {
	addrByte1, _ := hexutil.Decode("0x06acdc0d340a36ef0569ed6072b293c2e98bd839")
	addrByte2, _ := hexutil.Decode("0x6dee8213e1391efed846b7e98281c184a952e1ef")
	addrByte3, _ := hexutil.Decode("0x0000000000000000000000000000000000000001")
	code1 := "0x0061736d0100000001360b60037f7d7d0060027f7f0060037f7f7f017f6000017f60027f7f017f60017d0060027f7e0060000060017f017f60017f0060017e000282010703656e760c656f73696f5f617373657274000103656e76066d656d736574000203656e7610616374696f6e5f646174615f73697a65000303656e7610726561645f616374696f6e5f64617461000403656e76066d656d637079000203656e76077072696e747366000503656e7611656f73696f5f6173736572745f636f64650006030a0907080907090a0008070405017001020205030100010616037f014180c0000b7f0041aec0000b7f0041aec0000b070901056170706c79000c0907010041010b010d0afb05090400100a0b800101037f02400240024002402000450d004100410028028c40200041107622016a220236028c404100410028028440220320006a41076a417871220036028440200241107420004d0d0120014000417f460d020c030b41000f0b4100200241016a36028c40200141016a4000417f470d010b41004190c000100020030f0b20030b02000b3601017f230041106b2200410036020c4100200028020c28020041076a417871220036028440410020003602804041003f0036028c400b02000b4901017f230041106b2201240010070240200042808080808080e4d84a520d002001410036020c20014101360208200120012903083703002001100e1a0b4100100b200141106a24000b0900200120029210050ba90202077f027d230041206b22012102200124002000280204210320002802002104024002400240024010022205450d002005418104490d012005100821000c020b410021000c020b20012005410f6a4170716b220024000b2000200510031a0b200242003703180240200541034b0d00410041a9c00010000b200020056a2101200241186a4104722106200241186a2000410410041a200041046a210702402005417c714104470d00410041a9c00010000b20062007410410041a20022001360210200220003602082002200041086a36020c200241086a20034101756a210120022a021c210820022a0218210902402003410171450d00200128020020046a28020021040b200120092008200411000002402005418104490d00200010090b200241206a240041010bb50101047f230041106b22002101200024000240024002400240024010022202450d002002418004490d012002100821000c020b410021002001410c6a21030c020b20002002410f6a4170716b220024000b2000200210031a2001410c6a2103200241034b0d010b410041a9c00010000b20032000410410041a200041046a210002402002417c714104470d00410041a9c00010000b200141086a2000410410041a20012a020c20012a0208921005200141106a24000b0b2f02004190c0000b1e6661696c656420746f20616c6c6f636174652070616765730072656164000041000b0430200000"
	storage1 := state.Storage{
		state.GetStorageKey(1, []byte{1}): []byte{0xFF},
	}
	var data = GenesisAlloc{
		common.BytesToAddress(addrByte1): {Balance: big.NewInt(5 * 1e14)},
		common.BytesToAddress(addrByte2): {Balance: big.NewInt(0)},
		common.BytesToAddress(addrByte3): {
			Balance: big.NewInt(0),
			Code:    code1,
			Storage: storage1,
		},
	}

	fmt.Println(data)

	b, _ := json.Marshal(data)
	fmt.Println(string(b))

	var newData GenesisAlloc
	json.Unmarshal(b, &newData)

	fmt.Println(newData)
}

func TestMarshalGenesisAlloc2(t *testing.T) {
	var newData GenesisAlloc
	if data, err := ioutil.ReadFile("genesis_alloc.json"); err == nil {
		//fmt.Println(string(data))
		json.Unmarshal(data, &newData)
		//fmt.Println(newData)

		s := encodePreAlloc(newData)
		fmt.Println(strconv.QuoteToASCII(s))
	}
}
